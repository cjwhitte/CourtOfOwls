
@using SharedClasses.Models.CountryModels;
@using SharedClasses.Models.UserModels;
@using WebUI.Models;

@{
    ViewData["Title"] = "Map";
    List<CountryWithColor> countries = ViewBag.Countries;
    var mapType = ViewBag.mapType;
    var players = DataBaseClient.PlayerCollection.Find(_ => true).ToList();
    var armies = DataBaseClient.ArmyCollection.Find(_ => true).ToList();
    List<LegionMarker> markers = new();
    foreach(var army in armies) {
        foreach(var legion in army.Forces) {
            markers.Add(legion.Marker);
        }
    }
}

<script src="~/JVectorMap/jquery.js"></script>
<link rel="stylesheet" href="~/JVectorMap/jquery-jvectormap.css">
<script src="~/JVectorMap/jvectormap.min.js"></script>
<script src="~/JVectorMap/map_miller.js"></script>

<body>
<center>
  <div id="world-map" style="width: 1200px; height:700px"></div>
</center>


<form id="CountryForm" asp-controller="CountryProfile" asp-action="Index">
    <input id="CountryName" name="CountryName" type="hidden"></input>
</form>
<script>


var values = {
  @foreach(var country in countries)
  {
    @: "@country.Code": "@country.Username",
  }
};

var scale = {
  @foreach (var country in countries)
  {
    @: "@country.Username": "@country.Color", 
  }
}

var markerValues = [
    @foreach(var marker in markers) {
        @: { name:"@marker.Name", coords:"@marker.latLng", status:"@marker.Name" },
    }
]

var markerScale = {
    @foreach(var marker in markers) {
        @: "@marker.Name": "@marker.Color",
    }
}

console.log(markerValues);



$(function() {

    var map, 
        markerIndex = 0,
        markersCoords = {}

    map = new jvm.Map({
        map:'world_mill',
        backgroundColor: '2f4f4f',
        container: $('#world-map'),
        zoomAnimate: true,
        onRegionTipShow: function(event, label, code) {

            label.html(label.html() + ': ' + values[code]);
        },
        series: {
            regions: [{
                values: values,
                scale: scale
            }],
            markers: [{
                values: markerValues,
                scale: markerScale
            }]
        },
        onMarkerTipShow: function(e, label, code) {
            map.tip.text(markersCoords[code].lat.toFixed(2)+', '+markersCoords[code].lng.toFixed(2));
        },
        onMarkerClick: function(e, code) {
            map.removeMarkers([code]);
            map.tip.hide();
        }
    });

    map.container.click(function(e) {
    
        var latLng = map.pointToLatLng(
            e.pageX - map.container.offset().left,
            e.pageY - map.container.offset().top
        );
        targetCls = $(e.target).attr('class');
        /*
        if(latLng && (!targetCls || (targetCls && $(e.target).attr('class').indexOf('jvectormap-marker') === -1))) {
            markersCoords[markerIndex] = latLng;
            map.addMarker(markerIndex, { latLng: [latLng.lat, latLng.lng]});
            markerIndex += 1;
        }
        */
    })
})


/*
$('#world-map').vectorMap({
    map: 'world_mill',
    backgroundColor: '2f4f4f',
    zoomAnimate: true,
    regionsSelectable: true,
    regionsSelectableOne: true,
    markersSelectable: true,
    series: {
      regions: [{
        values: values,
        scale: scale
      }],
      markers: [{
          values: markers
      }]
    },
    onRegionTipShow: function(event, label, code) {
      label.html(label.html() + ': ' + values[code]);
    },
    onRegionClick: function(e, code) {
        let form = document.getElementById("CountryForm");
        console.log(`form = {form}`)
        console.log(code)
        form.CountryName.value= code;
        if(form.CountryName === null) return;
        form.submit();
    },
    onMarkerClick: function(e, code) {
        map.removeMarkers([code]);
        map.tip.hide();
    }


  });
*/
</script>
    
</body>
