@using SharedClasses.Models.CountryModels;
@using SharedClasses.Models.UserModels;
@using WebUI.Models;

@{
    ViewData["Title"] = "Map";

    
    List<Player> Players = ViewBag.Players;
    List<Country> Countries = ViewBag.Countries;

    List<CountryPlayer> countryPlayers = new();

    foreach(var country in Countries)
    {
      foreach(var player in Players)
      {
        if(country.Id == player.CountryId)
        {

          countryPlayers.Add(
            new CountryPlayer()
            {
              Color = player.Colour,
              CountryName = country.Name,
              CountryCode = country.CountryCode,
              PlayerUsername = player.Username
            }
          );
        }
      }
    }

    var countryPlayerJson = Newtonsoft.Json.JsonConvert.SerializeObject(countryPlayers);


    


}







<script src="~/JVectorMap/jquery.js"></script>
<link rel="stylesheet" href="~/JVectorMap/jquery-jvectormap.css">
<script src="~/JVectorMap/jvectormap.min.js"></script>

<script src="~/JVectorMap/map_miller.js"></script>


<Body>
<center>
  <div id="world-map" style="width: 1200px; height:700px"></div>
</center>

<script>

  
</script>


<script>

var playerData = @Html.Raw(countryPlayerJson);





function findPlayerColor(countryCode, players)
{
  for(var i = 0; i < players; i++)
  {
    if(players[i].CountryCode == countryCode)
    {
      return players[i].Color;
    }
  }

  return '#eeeeee';
}

$('#world-map').vectorMap({
    map: 'world_mill',
    backgroundColor: '2f4f4f',
    zoomAnimate: true,
    regionsSelectable: true,
    color: function(countryCode, countryName)
    {
      return findPlayerColor(countryCode, playerData);
    }
    onRegionClick: function(e, code)
    {
      console.log(code);
    },
    regionStyle:
    {
      initial:
      {
        fill: '#ffffff'
      }
    },
    series:
    {
      regions: [{
        values:mapData,
        attribute: 'fill'
      }]
    }
  });



</script>

    
</Body>
